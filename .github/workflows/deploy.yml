name: Build Docker Image & Deploy to SSH Machine

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build Docker image on GitHub runner
      - name: Build Docker image
        run: docker build -t www-vijitdua-com .

      # Save the Docker image as a tar file
      - name: Save Docker image as a tar file
        run: docker save -o www-vijitdua-com.tar www-vijitdua-com

      # Upload Docker image to VPS
      - name: Copy Docker image to SSH machine
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no www-vijitdua-com.tar ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/www.vijitdua.com/
      

      # Remove existing files from the Web Frontend directory on server
      - name: Remove existing files from Web Frontend directory on server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "sudo rm -rf /home/www.vijitdua.com/*"

      # Load Docker image on server and prepare for deployment
      - name: Load Docker image on SSH machine
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            sudo docker load -i /home/www.vijitdua.com/www-vijitdua-com.tar
          "

      # Stop and remove existing container (if running)
      - name: Stop and remove existing container if running
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            CONTAINER_ID=\$(sudo docker ps -q --filter name=www-vijitdua-com-container)
            if [ ! -z \$CONTAINER_ID ]; then
              echo 'Stopping container with ID: \$CONTAINER_ID'
              sudo docker stop \$CONTAINER_ID
              echo 'Removing container with ID: \$CONTAINER_ID'
              sudo docker rm \$CONTAINER_ID
            else
              echo 'No running container found with name www-vijitdua-com-container'
            fi
          "

      # Run the new Docker container on specified port
      - name: Run new Docker container
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            sudo docker run -d -p 3010:3000 --restart=always --name www-vijitdua-com-container www-vijitdua-com
          "