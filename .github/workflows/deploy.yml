name: Deploy to SSH Machine

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Remove existing files from the Web Frontend directory
      - name: Remove existing files from the Web Frontend directory on server
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "sudo -S rm -rf /home/www.vijitdua.com/*"

      # Copy new code to the server
      - name: Copy new files to SSH machine
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" rsync -avz --no-perms --omit-dir-times -e "ssh -o StrictHostKeyChecking=no" . ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/home/www.vijitdua.com

      # Build the Docker image directly on the server
      - name: Build Docker image on SSH machine
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            cd /home/www.vijitdua.com && sudo docker build . -t www-vijitdua-com
          "

      # Stop and remove existing container (if running)
      - name: Stop and remove existing container (if running)
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            CONTAINER_ID=\$(sudo docker ps -q --filter name=www-vijitdua-com-container)
            if [ ! -z \$CONTAINER_ID ]; then
              echo 'Stopping container with ID: \$CONTAINER_ID'
              sudo docker stop \$CONTAINER_ID
              echo 'Removing container with ID: \$CONTAINER_ID'
              sudo docker rm \$CONTAINER_ID
            else
              echo 'No running container found with name www-vijitdua-com-container'
            fi
          "

      # Run the new Docker container on port 3010
      - name: Run new Docker container
        run: |
          sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            sudo docker run -d -p 3010:3000 --restart=always --name www-vijitdua-com-container www-vijitdua-com
          "
      # Create a GitHub Deployment event
      - name: Create Deployment
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              transient_environment: false,
              production_environment: true
            });
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: response.data.id,
              state: 'success'
            });